<input>

######################## number of models

# Number of models for which details are described in this input file
<modelnumber> 1 </modelnumber>

<submodelnumber> 1 </submodelnumber>

######################## restart

# Restart from previous (pickled) population?
<restart> False </restart>

######################## epsilon schedule

# Automatic epsilon schedule. Provide a vector of final epsilons and the alpha (defaults to 0.9)
<epsilon> 
 <e1> 160 150 140 130 120 100 80 50 40 37 35 </e1>
</epsilon>


######################## particles

<particles> 100 </particles>

######################## beta

# Beta is the number of times to simulate each sampled parameter set.
# This is only applicable for models simulated using Gillespie and SDE
<beta> 1 </beta>

######################## dt

# Internal timestep for solver.
# Make this small for a stiff model.
<dt> 1 </dt>

######################## perturbation kernels : OPTIONAL (default uniform)

# The pertubation kernels are computed with respect to the previous parameter distribution
# Currently adaptive and non-adaptive uniform and normal perturbation kernels can be implemented
# To use adaptive kernels, use just <kernel> uniform </kernel> or <kernel> normal </kernel>
# To use non-adaptive kernels, use <kernel> uniform lowerbound upperbound </kernel> or <kernel> normal mean variance </kernel>

<kernel> multiVariateNormal </kernel>


######################## User-supplied data

<data>

# times: For ABC SMC, times must be a whitespace delimited list
# In simulation mode these are the timepoints for which the simulations will be output

# variables: For ABC SMC, whitespace delimited lists of concentrations (ODE or SDE) or molecule numbers (Gillespie)
# Denote your data via tags <v1> </v1> or <var1> </var1> or <v2> </v2> etc. The tags are ignored and the data read in order
# For simulation these data are ignored
# See fitting instruction below if the dimensionality of your data sets differ from the dimensionality of your model

<data1>
 <times> 0.0 0.6 4.2 6.2 8.6 13.4 16 21.4 27.6 34.4 39.8 40.6 45.2  </times>

 <variables>
 <var1> 0 2.04 32.29 4.13 2.15 5.09 1.07 3.67 39.01 73.83 8.54 17.62 11.96 </var1>
 <var2> 0 28.99 32.29 10.61 55.27 9.49 68.56 10.62 -1.95 3.53 63.87 39.68 -0.6 </var2>
 <var3> 0 20.96 7.49 44.25 7.12 60.52 8.10 63.76 22.9 6.27 10.59 6.50 70.56 </var3>
 
 </variables>
</data1>

</data>


######################## Models with associated submodels

<models>
######################## Model (submodels listed in section below)

<model1>
<name> model1 </name>
# type: the method used to simulate your model. ODE, SDE or Gillespie.
<type> ODE </type>

# Priors on initial conditions and parameters:
# one of 
#       constant, value 
#       normal, mean, variance 
#       uniform, lower, upper 
#       lognormal, mean, variance 
#       trunc_normal, mean, variance, lowerbound, upperbound (either lowerbound or upperbound can be 'i')

<parameters>
<parameter1> constant 1 </parameter1>
<parameter2> uniform -2 10 </parameter2>
<parameter3> uniform  0 10 </parameter3>
<parameter4> uniform -5 20 </parameter4>
<parameter5> uniform 500 2500 </parameter5>
<parameter6> constant 1 </parameter6>
</parameters>

######################## Set of associated submodels

<submodels>
<submodel1_1>
<name> model1_1 </name>
<source> repressilator.xml </source>

# Fitting information. If fit is None, all species in the model are fitted to the data in the order they are listed in the model.
# Otherwise, give a whitespace delimited list of fitting instrictions the same length as the dimensions of your data.
# Use speciesN to denote the Nth species in your model. Simple arithmetic operations can be performed on the species from your model.
# For example, to fit the sum of the first two species in your model to your first variable, write fit: species1+species2
<fit> species1 species3 species5 </fit>

# Optional argument. Distance function can be euclidean, log, or custom (to be defined in customABC.py). The default is euclidean, unless 'custd' is given in the command line, in which case custom is the default.
<!-- <distancefunction>    </distancefunction> -->

# If any of the parameters must be considered as local parameters (i.e. sampled using different distributions for different submodels), specify these below.
# Ensure that all local parameters are subsequently deleted from the overall model parameter list (above).
# Local parameters can be specified by giving additional vectors enclosed in <param2> </param2>, <param3> </param3> etc
# NOTE: the parser always reads them in order and ignores the tag value
<!-- <localparameters> -->
<!-- <param1> comstant 1.0 </param1> -->
<!-- <param2> uniform 1.0 10.0 </param2> -->
<!-- </localparameters> -->

# Optional argument. Distance function can be euclidean, log, or custom (to be defined in customABC.py).
# The default is euclidean, unless 'custd' is given in the command line, in which case custom is the default.
<!-- <distancefunction>    </distancefunction> -->

<initial>
 <ic1> constant 0.0 </ic1>
 <ic2> constant 2.0 </ic2>
 <ic3> constant 0.0 </ic3>
 <ic4> constant 1.0 </ic4>
 <ic5> constant 0.0 </ic5>
 <ic6> constant 3.0 </ic6>
</initial>
</submodel1_1>


</submodels>

</model1>

</models>

</input>

